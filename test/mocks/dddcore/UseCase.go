// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	dddcore "cypt/internal/dddcore"

	mock "github.com/stretchr/testify/mock"
)

// UseCase is an autogenerated mock type for the UseCase type
type UseCase[I dddcore.Input, O dddcore.Output] struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0
func (_m *UseCase[I, O]) Execute(_a0 *I) (*O, error) {
	ret := _m.Called(_a0)

	var r0 *O
	var r1 error
	if rf, ok := ret.Get(0).(func(*I) (*O, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*I) *O); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*O)
		}
	}

	if rf, ok := ret.Get(1).(func(*I) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUseCase creates a new instance of UseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUseCase[I dddcore.Input, O dddcore.Output](t interface {
	mock.TestingT
	Cleanup(func())
}) *UseCase[I, O] {
	mock := &UseCase[I, O]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
